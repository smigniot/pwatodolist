{"version":3,"sources":["serviceWorker.js","Todo.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","STATUSES","split","Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","inputRef","React","createRef","_onEditionStart","onEditionStart","bind","assertThisInitialized","_onEditionEnd","onEditionEnd","e","setState","newTitle","current","innerText","onTitleChange","focus","react_default","a","createElement","className","status","onClick","onStatusChange","contentEditable","onDoubleClick","onBlur","ref","title","creation","Component","App","_maybeNew","maybeNew","event","keyCode","value","onNewTodo","_this2","todos","map","todo","s","_statusChange","id","indexOf","length","_titleChange","key","Todo_Todo","type","onKeyUp","connect","dispatch","store","createStore","action","objectSpread","t","maxid","reduce","acc","Math","max","concat","Date","toISOString","replace","filter","existing","localStorage","getItem","err","JSON","parse","getInitialState","subscribe","console","log","stringify","getState","setItem","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yHCfAC,SAAW,yCAAyCC,MAAM,WAe1DC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAEXR,EAAKS,SAAWC,IAAMC,YACtBX,EAAKY,gBAAkBZ,EAAKa,eAAeC,KAApBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACvBA,EAAKgB,cAAgBhB,EAAKiB,aAAaH,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAPJA,8EASJkB,GACRf,KAAKI,MAAMC,SACZL,KAAKgB,SAAS,CAACX,SAAQ,yCAGhBU,GACX,GAAGf,KAAKI,MAAMC,QAAS,CACnBL,KAAKgB,SAAS,CAACX,SAAQ,IACvB,IAAMY,EAAWjB,KAAKM,SAASY,QAAQC,UACvCnB,KAAKJ,MAAMwB,eAAiBpB,KAAKJ,MAAMwB,cAAcH,iDAItDjB,KAAKI,MAAMC,SACVL,KAAKM,SAASY,QAAQG,yCAI1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,SAASzB,KAAKJ,MAAM8B,QAAU,SAC5CJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS3B,KAAKJ,MAAMgC,iBAC5BN,EAAAC,EAAAC,cAAA,QAAMK,gBAAiB7B,KAAKI,MAAMC,QAC9ByB,cAAe9B,KAAKS,gBACpBsB,OAAQ/B,KAAKa,cACbmB,IAAKhC,KAAKM,UACRN,KAAKJ,MAAMqC,OACjBX,EAAAC,EAAAC,cAAA,YAAOxB,KAAKJ,MAAMsC,kBApCPC,aCbbC,qBACJ,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KACDU,SAAWC,IAAMC,YACtBX,EAAKwC,UAAYxC,EAAKyC,SAAS3B,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAHAA,wEAKV0C,GACP,GAAqB,KAAlBA,EAAMC,QAAgB,CACvB,IAAMP,EAAQjC,KAAKM,SAASY,QAAQuB,MACjCR,GACDjC,KAAKJ,MAAM8C,UAAUT,qCAIlB,IAAAU,EAAA3C,KACP,OACIsB,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACTzB,KAAKJ,MAAMgD,MAAMC,IAAI,SAAAC,GAClB,IDrBIC,ECqBEC,EAAgBL,EAAK/C,MAAMgC,eAAejB,KAC5CgC,EAAKG,EAAKG,IDtBVF,ECsBwBD,EAAKpB,ODrBtCjC,GAAU,EAAEA,EAASyD,QAAQH,GAAK,KAAMtD,EAAS0D,UCsBtCC,EAAeT,EAAK/C,MAAMwB,cAAcT,KAC1CgC,EAAKG,EAAKG,IACd,OACI3B,EAAAC,EAAAC,cAAA,MAAI6B,IAAKP,EAAKG,IACZ3B,EAAAC,EAAAC,cAAC8B,EAAD,CAAML,GAAIH,EAAKG,GAAIhB,MAAOa,EAAKb,MAC7BP,OAAQoB,EAAKpB,OAAQQ,SAAS,aAC9BN,eAAgBoB,EAChB5B,cAAegC,QAM/B9B,EAAAC,EAAAC,cAAA,SAAO+B,KAAK,OAAOC,QAASxD,KAAKqC,UAC7BL,IAAKhC,KAAKM,mBApCJ6B,cA0CHsB,cACX,SAAArD,GAAK,MAAG,CAACwC,MAAMxC,EAAMwC,QACrB,SAAAc,GAAQ,MAAG,CACT9B,eAAgB,SAACqB,EAAGvB,GAClBgC,EAAS,CAACH,KAAK,gBAAiBN,GAAGA,EAAGvB,OAAOA,KAE/CN,cAAe,SAAC6B,EAAIhB,GAClByB,EAAS,CAACH,KAAK,eAAgBN,GAAGA,EAAGhB,MAAMA,KAE7CS,UAAW,SAACT,GACVyB,EAAS,CAACH,KAAK,WAAYtB,MAAMA,OAV1BwB,CAabrB,SCHF,IAAMuB,EAAQC,YAjDd,SAAiBxD,EAAOyD,GACpB,OAAOA,EAAON,MACV,IAAK,gBACD,OAAOzD,OAAAgE,EAAA,EAAAhE,CAAA,GAAIM,EAAX,CACIwC,MAAMxC,EAAMwC,MAAMC,IAAI,SAAAkB,GAClB,OAAGA,EAAEd,KAAOY,EAAOZ,GAAWc,EACvBjE,OAAAgE,EAAA,EAAAhE,CAAA,GAAIiE,EAAX,CAAcrC,OAAOmC,EAAOnC,aAGxC,IAAK,eACD,OAAO5B,OAAAgE,EAAA,EAAAhE,CAAA,GAAIM,EAAX,CACIwC,MAAMxC,EAAMwC,MAAMC,IAAI,SAAAkB,GAClB,OAAGA,EAAEd,KAAOY,EAAOZ,GAAWc,EACvBjE,OAAAgE,EAAA,EAAAhE,CAAA,GAAIiE,EAAX,CAAc9B,MAAM4B,EAAO5B,YAGvC,IAAK,WACD,IAAM+B,EAAQ5D,EAAMwC,MAAMqB,OAAO,SAACC,EAAIH,GAAL,OAASI,KAAKC,IAAIF,EAAIH,EAAEd,KAAK,GAC9D,OAAOnD,OAAAgE,EAAA,EAAAhE,CAAA,GAAIM,EAAX,CACIwC,MAAMxC,EAAMwC,MAAMyB,OAAO,CAAC,CACtBpB,GAAGe,EAAM,EACTtC,OAAO,OACPO,MAAM4B,EAAO5B,MACbC,UAAU,IAAIoC,MAAQC,cAAcC,QAAQ,MAAM,SAG9D,IAAK,cACD,OAAO1E,OAAAgE,EAAA,EAAAhE,CAAA,GAAIM,EAAX,CACIwC,MAAMxC,EAAMwC,MAAM6B,OAAO,SAAAV,GAAC,OAAEA,EAAEd,KAAOY,EAAOZ,OAEpD,QACI,OAAO7C,IAInB,WACI,IAAIsE,EAAW,KACf,IACEA,EAAWC,aAAaC,QAAQ,wBAChC,MAAMC,GAENH,EAAW,KAKb,OAHiBA,EAAWI,KAAKC,MAAML,GAAY,CAC/C9B,MAAM,IAKqBoC,IACnCrB,EAAMsB,UAAU,kBAAMC,QAAQC,IAAI,QAASL,KAAKM,UAAUzB,EAAM0B,eAChE1B,EAAMsB,UAAU,WAAQN,aAAaW,QAAQ,uBACzCR,KAAKM,UAAUzB,EAAM0B,eASzBE,IAASC,OACHlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAU9B,MAAOA,GACfrC,EAAAC,EAAAC,cAACkE,EAAD,OAEJC,SAASC,eAAe,SHwDtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a797b7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './Todo.css';\n\nconst STATUSES = \"todo,ongoing,finished,removed,canceled\".split(/,/g);\nfunction nextStatus(s) {\n    return STATUSES[(1+STATUSES.indexOf(s || \"\"))%(STATUSES.length)]\n}\n\nfunction getStatusAction(id, newStatus) {\n    return {type:\"STATUS_CHANGE\", id:id, status:newStatus};\n}\nfunction getTitleAction(id, newTitle) {\n    return {type:\"TITLE_CHANGE\", id:id, title:newTitle};\n}\nfunction getAddAction(title) {\n    return {type:\"TODO_ADD\", title:title};\n}\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false,\n    }\n    this.inputRef = React.createRef();\n    this._onEditionStart = this.onEditionStart.bind(this);\n    this._onEditionEnd = this.onEditionEnd.bind(this);\n  }\n  onEditionStart(e) {\n    if(!(this.state.editing)) {\n        this.setState({editing:true});\n    }\n  }\n  onEditionEnd(e) {\n    if(this.state.editing) {\n        this.setState({editing:false});\n        const newTitle = this.inputRef.current.innerText;\n        this.props.onTitleChange && this.props.onTitleChange(newTitle);\n    }\n  }\n  componentDidUpdate() {\n    if(this.state.editing) {\n        this.inputRef.current.focus();\n    }\n  }\n  render() {\n    return (\n      <div className={\"task \"+(this.props.status || \"todo\")}>\n        <button onClick={this.props.onStatusChange} />\n        <span contentEditable={this.state.editing}\n            onDoubleClick={this._onEditionStart}\n            onBlur={this._onEditionEnd}\n            ref={this.inputRef}\n            >{this.props.title}</span>\n        <time>{this.props.creation}</time>\n      </div>\n    );\n  }\n}\n\nexport {Todo,nextStatus,getStatusAction,getTitleAction,getAddAction};\n\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Todo, nextStatus } from './Todo';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.inputRef = React.createRef();\n    this._maybeNew = this.maybeNew.bind(this);\n  }\n  maybeNew(event) {\n    if(event.keyCode === 13) {\n      const title = this.inputRef.current.value;\n      if(title) {\n        this.props.onNewTodo(title);\n      }\n    }\n  }\n  render() {\n    return (\n        <main>\n        <h1>Todo list</h1>\n        <ul className=\"todolist\">\n            {this.props.todos.map(todo=>{\n                const _statusChange = this.props.onStatusChange.bind(\n                    this,todo.id,nextStatus(todo.status));\n                const _titleChange = this.props.onTitleChange.bind(\n                    this,todo.id);\n                return (\n                    <li key={todo.id}>\n                      <Todo id={todo.id} title={todo.title}\n                        status={todo.status} creation=\"2019-01-03\"\n                        onStatusChange={_statusChange}\n                        onTitleChange={_titleChange}\n                        />\n                    </li>\n                );\n            })}\n        </ul>\n        <input type=\"text\" onKeyUp={this._maybeNew} \n            ref={this.inputRef} />\n        </main>\n    );\n  }\n}\n\nexport default connect(\n    state=>({todos:state.todos}),\n    dispatch=>({\n      onStatusChange: (id,status)=>{\n        dispatch({type:\"STATUS_CHANGE\", id:id,status:status});\n      },\n      onTitleChange: (id, title) => {\n        dispatch({type:\"TITLE_CHANGE\", id:id,title:title});\n      },\n      onNewTodo: (title) => {\n        dispatch({type:\"TODO_ADD\", title:title});\n      },\n    }),\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case \"STATUS_CHANGE\":\n            return {...state,\n                todos:state.todos.map(t=>{\n                    if(t.id !== action.id) return t;\n                    return {...t, status:action.status, };\n                })\n            };\n        case \"TITLE_CHANGE\":\n            return {...state,\n                todos:state.todos.map(t=>{\n                    if(t.id !== action.id) return t;\n                    return {...t, title:action.title, };\n                })\n            };\n        case \"TODO_ADD\":\n            const maxid = state.todos.reduce((acc,t)=>Math.max(acc,t.id), 0);\n            return {...state,\n                todos:state.todos.concat([{\n                    id:maxid+1,\n                    status:\"todo\",\n                    title:action.title,\n                    creation:(new Date()).toISOString().replace(/T.*/,\"\"),\n                }])\n            };\n        case \"TODO_DELETE\":\n            return {...state,\n                todos:state.todos.filter(t=>t.id !== action.id),\n            };\n        default:\n            return state;\n    }\n}\n\nfunction getInitialState() {\n    let existing = null;\n    try {\n      existing = localStorage.getItem(\"todolist_redux_store\");\n    } catch(err) {\n      // Maybe turned off\n      existing = null;\n    }\n    const initial = (existing)?(JSON.parse(existing)):({\n        todos:[],\n    });\n    return initial;\n}\n\nconst store = createStore(reducer, getInitialState());\nstore.subscribe(() => console.log(\"STORE\", JSON.stringify(store.getState())));\nstore.subscribe(() => { localStorage.setItem(\"todolist_redux_store\",\n    JSON.stringify(store.getState())); });\n\n//store.dispatch({type:\"TODO_ADD\",title:\"First one\"});\n//store.dispatch({type:\"TITLE_CHANGE\",id:1,title:\"The first one\"});\n//store.dispatch({type:\"TODO_ADD\",title:\"Second one\"});\n//store.dispatch({type:\"STATUS_CHANGE\",id:1,status:\"finished\"});\n//store.dispatch({type:\"TODO_DELETE\",id:1});\n//store.dispatch({type:\"TODO_DELETE\",id:2});\n\nReactDOM.render(\n     (<Provider store={store}>\n        <App />\n     </Provider>),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}