{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["STATUSES","split","Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","inputRef","React","createRef","e","setState","newTitle","current","innerText","onTitleChange","focus","react_default","a","createElement","className","status","onClick","onStatusChange","contentEditable","onDoubleClick","onEditionStart","bind","onBlur","onEditionEnd","ref","title","creation","Component","LSPROP","ISWARNED","App","existing","localStorage","getItem","err","JSON","parse","todos","id","setItem","stringify","objectSpread","alert","map","todo","assign","s","indexOf","length","filter","keyCode","target","value","t","reduce","acc","o","Math","max","Date","toISOString","replace","concat","_this2","Todo_Todo","key","type","placeholder","onKeyUp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1548b0e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nconst STATUSES = \"todo,ongoing,finished,removed,canceled\".split(/,/g);\nfunction nextStatus(s) {\n    return STATUSES[(1+STATUSES.indexOf(s || \"\"))%(STATUSES.length)]\n}\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false,\n    }\n    this.inputRef = React.createRef();\n  }\n  onEditionStart(e) {\n    if(!(this.state.editing)) {\n        this.setState({editing:true});\n    }\n  }\n  onEditionEnd(e) {\n    if(this.state.editing) {\n        this.setState({editing:false});\n        const newTitle = this.inputRef.current.innerText;\n        this.props.onTitleChange(newTitle);\n    }\n  }\n  componentDidUpdate() {\n    if(this.state.editing) {\n        this.inputRef.current.focus();\n    }\n  }\n  render() {\n    return (\n      <div className={\"task \"+(this.props.status || \"todo\")}>\n        <button onClick={this.props.onStatusChange} />\n        <span contentEditable={this.state.editing}\n            onDoubleClick={this.onEditionStart.bind(this)}\n            onBlur={this.onEditionEnd.bind(this)}\n            ref={this.inputRef}\n            >{this.props.title}</span>\n        <time>{this.props.creation}</time>\n      </div>\n    );\n  }\n}\n\nexport {Todo,nextStatus};\n","import React, { Component } from 'react';\nimport { Todo, nextStatus } from './Todo';\nimport './App.css';\n\nconst LSPROP = \"Todo_List_JSON\";\nvar ISWARNED = false;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let existing = null;\n    try {\n      existing = localStorage.getItem(LSPROP);\n    } catch(err) {\n      // Maybe turned off\n      existing = null;\n    }\n    this.state = (existing)?(\n      JSON.parse(existing)\n    ):({\n      todos: [\n        {id:1,status:\"finished\",title:\"Taste react\",creation:\"2019-01-02\"},\n        {id:2,status:\"todo\",title:\"Bake some morning coffee\",creation:\"2019-01-03\"},\n      ],\n    });\n  }\n  componentWillUpdate() {\n    try {\n      localStorage.setItem(LSPROP, JSON.stringify({\n          ...this.state\n      }));\n    } catch(err) {\n      if(!ISWARNED) {\n        alert(\"Local storage is turned off\\nThe app will work but not save\");\n        ISWARNED = true;\n      }\n    }\n  }\n  onStatusChange(id, e) {\n    this.setState({\n        todos:this.state.todos.map(todo=>{\n            if(todo.id === id) {\n                return Object.assign({}, todo, {\n                    status:nextStatus(todo.status),\n                });\n            }\n            return todo;\n        }),\n    });\n  }\n  onTitleChange(id, newTitle) {\n    if(newTitle) {\n        this.setState({\n            todos:this.state.todos.map(todo=>{\n                if(todo.id === id) {\n                    return Object.assign({}, todo, {\n                        title:newTitle,\n                    });\n                }\n                return todo;\n            }),\n        });\n    } else {\n        this.setState({\n            todos:this.state.todos.filter(todo=>todo.id !== id),\n        });\n    }\n  }\n  onKeyUp(e) {\n    if(e.keyCode === 13) {\n      const newTitle = e.target.value;\n      const i = this.state.todos.reduce((acc,o)=>Math.max(acc,o.id),0);\n      const t = {\n        id:(i+1), title:newTitle, status:\"todo\",\n        creation: new Date().toISOString().replace(/T.*/,\"\"),\n      };\n      this.setState({\n        todos:[t].concat(this.state.todos),\n      });\n      e.target.value = \"\";\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Todo list #2</h1>\n        <ul>\n          {this.state.todos.map(todo=>(\n            <Todo key={todo.id} title={todo.title}\n                status={todo.status} creation=\"2019-01-03\"\n                onStatusChange={this.onStatusChange.bind(this, todo.id)}\n                onTitleChange={this.onTitleChange.bind(this, todo.id)}\n                />\n          ))}\n        </ul>\n        <input type=\"text\" placeholder=\"New todo\" \n            onKeyUp={this.onKeyUp.bind(this)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}